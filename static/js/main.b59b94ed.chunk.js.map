{"version":3,"sources":["components/HexCalculator.js","App.js","reportWebVitals.js","index.js"],"names":["HexCalculator","calculateHexSum","firstNumber","secondNumber","carry","index","result","sum","parseInt","resultToBeReturned","toString","useState","firstHexNumber","secondHexNumber","output","state","setState","inputChangeHandler","evt","target","name","value","isHex","length","input","test","className","type","onChange","placeholder","onClick","alert","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAwFeA,MArFf,WAEE,IAAMC,EAAkB,SAAlBA,EAAmBC,EAAaC,GAAgD,IAAlCC,EAAiC,uDAA3B,EAAGC,EAAwB,uDAAlB,EAAIC,EAAc,uDAAP,GAE5E,GAAGD,EAAQ,EAET,OAAOD,EAAS,EAAIA,EAAQE,EAASA,EAIvC,IAAMC,GAAOC,SAASN,EAAYG,EAAM,GAAI,KAAO,IAAMG,SAASL,EAAaE,EAAM,GAAI,KAAO,GAAMD,EAMhGK,EAAsBR,EAC1BC,EACAC,EALFC,EAAQG,GAAO,EAObF,EAAQ,GACD,GAANE,GAAUG,SAAS,IAAMJ,GAK5B,OAAOG,GA1Bc,EA6BGE,mBAAS,CACjCC,eAAgB,GAChBC,gBAAiB,GACjBC,OAAQ,KAhCa,mBA6BhBC,EA7BgB,KA6BTC,EA7BS,KAmCjBC,EAAqB,SAACC,GAAS,IAAD,EACZA,EAAIC,OAAnBC,EAD2B,EAC3BA,KAAMC,EADqB,EACrBA,OACVC,EAAMD,IAA2B,IAAjBA,EAAME,SACvBP,EAAS,2BACJD,GADG,gBAEND,OAAQ,IACPM,EAAOC,MAKRC,EAAQ,SAACE,GAAD,MAAW,iBAAiBC,KAAKD,IAe/C,OACE,sBAAKE,UAAU,aAAf,UACE,8BACE,uBAAOC,KAAK,OAAOD,UAAU,QAAQN,KAAK,iBAAiBQ,SAAUX,EAAoBY,YAAY,+BAA+BR,MAAON,EAAMH,mBAGnJ,8BACE,uBAAOe,KAAK,OAAOD,UAAU,QAAQN,KAAK,kBAAkBQ,SAAUX,EAAoBY,YAAY,gCAAiCR,MAAON,EAAMF,oBAIpJE,EAAMD,QACN,8BACE,uBAAMY,UAAU,SAAhB,qBACWX,EAAMD,YAKrB,wBAAQY,UAAU,MAAMI,QAhCE,WAAO,IACZ5B,EAA8Ca,EAA9DH,eAA8CT,EAAgBY,EAAjCF,gBACpC,GAAGX,EAAYqB,OAAS,GAAKpB,EAAaoB,OAAS,EACjDQ,MAAM,wCAEH,CACH,IAAM1B,EAAQH,EAAYqB,OAASpB,EAAaoB,OAASrB,EAAYqB,OAASpB,EAAaoB,OAC3FP,EAAS,CACPF,OAAQb,EAAgBC,EAAaC,EAAc,EAAGE,OAwBxD,4BCpES2B,MAVf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCGOO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b59b94ed.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport '../styles/HexCalculator.css';\n\nfunction HexCalculator() {\n\n  const calculateHexSum = (firstNumber, secondNumber, carry=0, index=0 , result=\"\") => {\n    // base case if index last digit has arrived add push carry to the start of result\n    if(index < 0 ){\n      // if carry is greater than 0 append it before result else return the result\n      return carry  > 0 ? carry + result : result;\n    }\n\n    // converts to base 16 and adds carry from the last bit\n    const sum = (parseInt(firstNumber[index-1], 16) || 0) + (parseInt(secondNumber[index-1], 16) || 0) +  carry\n\n    // drops 4 bits and keeps the carry\n    carry = sum >> 4\n\n    // calls the recursion again to sum the hex\n    const resultToBeReturned =  calculateHexSum(\n      firstNumber,\n      secondNumber,\n      carry,\n      index - 1,\n      (sum & 15).toString(16) + result\n      // in the above line sum & 15 actually intersections the 1111 and the digit\n      // that we want to add in sum as we have already separated the carry\n    )\n\n    return resultToBeReturned\n  }\n\n  const [state, setState] = useState({\n    firstHexNumber: \"\",\n    secondHexNumber: \"\",\n    output: \"\"\n  });\n\n  const inputChangeHandler = (evt) => {\n    const {name, value} = evt.target;\n    if(isHex(value) || value.length === 0 ){\n      setState({\n        ...state,\n        output: \"\",\n        [name]: value\n      })\n    }\n  }\n\n  const isHex = (input) => /^[0-9A-Fa-f]+$/.test(input)\n\n  const calculateClickHandler = () => {\n    const {firstHexNumber: firstNumber, secondHexNumber: secondNumber} = state;\n    if(firstNumber.length < 1 || secondNumber.length < 1 ){\n      alert('Please enter both numbers first.')\n    }\n    else {\n      const index = firstNumber.length > secondNumber.length ? firstNumber.length : secondNumber.length;\n      setState({\n        output: calculateHexSum(firstNumber, secondNumber, 0, index)\n      })\n    }\n  }\n\n  return (\n    <div className=\"Calculator\">\n      <div>\n        <input type=\"text\" className=\"field\" name=\"firstHexNumber\" onChange={inputChangeHandler} placeholder='Add First hexadecimal number' value={state.firstHexNumber} />\n      </div>\n\n      <div>\n        <input type=\"text\" className=\"field\" name=\"secondHexNumber\" onChange={inputChangeHandler} placeholder='Add Second hexadecimal number'  value={state.secondHexNumber}/>\n      </div>\n\n      {\n        state.output &&\n        <div>\n          <span className=\"output\">\n            Result: {state.output}\n          </span>\n        </div>\n      }\n\n      <button className=\"btn\" onClick={calculateClickHandler}> Calculate</button>\n    </div>\n  );\n}\n\nexport default HexCalculator;\n","import React from 'react';\nimport './App.css';\nimport HexCalculator from './components/HexCalculator';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <HexCalculator />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}